import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { usePaginationItems } from './hooks/usePaginationItems';
import { preventDefault } from './helpers/dom';
export default memo(BootstrapPagination);
/* eslint-disable jsx-a11y/anchor-is-valid */
function BootstrapPagination(_a) {
    var current = _a.current, total = _a.total, handlePageChange = _a.onPageChange, maxWidth = _a.maxWidth;
    var _b = usePaginationItems(current, total, maxWidth), items = _b.items, ref = _b.ref;
    if (items.length === 0)
        return null;
    return (React.createElement("ul", { className: "pagination justify-content-center", ref: ref }, items.map(function (item) {
        return item.gotoPage !== undefined ? (
        // item = ClickableItem
        React.createElement("li", { key: item.key, className: "page-item" + (item.active ? ' active' : '') },
            React.createElement("a", { className: "page-link", href: "#", onClick: preventDefault(function () { return handlePageChange(item.gotoPage); }), "aria-label": item.a11yLabel }, getLabel(item.label, item.a11yLabel)))) : (
        // item = NonClickableItem
        React.createElement("li", { key: item.key, className: "page-item disabled", "aria-hidden": item.a11yHidden },
            React.createElement("span", { className: "page-link" }, getLabel(item.label, item.a11yLabel))));
    })));
}
BootstrapPagination.propTypes = {
    current: PropTypes.number.isRequired,
    total: PropTypes.number.isRequired,
    onPageChange: PropTypes.func.isRequired,
    maxWidth: PropTypes.number,
};
function getLabel(label, a11yLabel) {
    return a11yLabel ? (React.createElement(React.Fragment, null,
        React.createElement("span", { "aria-hidden": "true" }, label),
        React.createElement("span", { className: "sr-only" }, a11yLabel))) : (label);
}
